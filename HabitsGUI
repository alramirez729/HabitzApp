import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalTime;
import java.util.LinkedList;

public class HabitsGUI extends JFrame {

    private LinkedList<Habit> habitsList;
    private JPanel habitsPanel; // Panel to hold habit entries

    public HabitsGUI(LinkedList<Habit> habits) {
        this.habitsList = habits;
        setTitle("Habits App");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 750);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

        // 'Add Habit' Button
        JButton addButton = new JButton("Add Habit");
        addButton.setAlignmentX(Component.LEFT_ALIGNMENT);
        addButton.addActionListener(e -> {
            String name = JOptionPane.showInputDialog("Enter habit name:");
            String description = JOptionPane.showInputDialog("Enter habit description:");

            if (name != null && description != null && !name.isEmpty() && !description.isEmpty()) {
                int option = JOptionPane.showOptionDialog(
                        null,
                        "Would you like to specify a time for the habit?",
                        "Time Selection",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        new String[]{"Yes", "No"},
                        null);

                LocalTime selectedTime = null;
                if (option == JOptionPane.YES_OPTION) {
                    selectedTime = selectTime();
                }

                habitsList.add(new Habit(name, description, selectedTime));
                addHabitToPanel(habitsList.getLast());
            }
        });


        // 'Uncheck All' Checkbox
        JButton uncheckAllButton = new JButton("Reset all Habitz");
        uncheckAllButton.setAlignmentX(Component.LEFT_ALIGNMENT);
        uncheckAllButton.addActionListener(e -> {
            for (Habit habit : habitsList) {
                habit.setCompleted(false);
            }
            refreshHabitsPanel(); // Refresh the panel to reflect changes
        });

        mainPanel.add(Box.createVerticalGlue());
        mainPanel.add(addButton);
        mainPanel.add(uncheckAllButton);
        mainPanel.add(Box.createVerticalGlue());

        habitsPanel = new JPanel();
        habitsPanel.setLayout(new BoxLayout(habitsPanel, BoxLayout.Y_AXIS));

        JScrollPane scrollPane = new JScrollPane(habitsPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setPreferredSize(new Dimension(500, 600));

        mainPanel.add(scrollPane);
        add(mainPanel);
        setVisible(true);
    }

    private void addHabitToPanel(Habit habit) {
        JPanel habitPanel = new JPanel();
        habitPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel nameLabel;
        if(habit.getTime() == null){
            nameLabel = new JLabel("<html><b><u><i>" +
                    habit.getHabitName() + "</u></b></i>" +
                    ".<br> Description: " + habit.getDescription() +
                    "</html>");
        }
        else{
            nameLabel = new JLabel("<html><b><u><i>" +
                    habit.getHabitName() + "</u></b></i>" +
                    ".<br> Description: " + habit.getDescription() +
                    "<br> Time: " + habit.getTime() +
                    "</html>");
        }


        JCheckBox checkBox = new JCheckBox();
        checkBox.setSelected(habit.isCompleted());
        checkBox.addActionListener(e -> habit.setCompleted(checkBox.isSelected()));

        habitPanel.add(checkBox);
        habitPanel.add(nameLabel);
        habitsPanel.add(habitPanel);

        habitsPanel.revalidate();
        habitsPanel.repaint();
    }

    private void refreshHabitsPanel() {
        habitsPanel.removeAll();

        for (Habit habit : habitsList) {
            addHabitToPanel(habit);
        }

        habitsPanel.revalidate();
        habitsPanel.repaint();
    }

    private LocalTime selectTime() {
        SpinnerModel spinnerModel = new SpinnerListModel(getTimeList());
        JSpinner timeSpinner = new JSpinner(spinnerModel);
        timeSpinner.setEditor(new JSpinner.DefaultEditor(timeSpinner));

        int option = JOptionPane.showOptionDialog(null, timeSpinner, "Select Time", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (option == JOptionPane.OK_OPTION) {
            String selectedTimeStr = (String) timeSpinner.getValue();
            return LocalTime.parse(selectedTimeStr);
        }
        return null;
    }

    private String[] getTimeList() {
        String[] timeList = new String[24 * 60];
        int index = 0;
        for (int hour = 0; hour < 24; hour++) {
            for (int minute = 0; minute < 60; minute++) {
                timeList[index++] = String.format("%02d:%02d", hour, minute);
            }
        }
        return timeList;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LinkedList<Habit> habits = new LinkedList<>();
            new HabitsGUI(habits);
        });
    }
}
