import javax.swing.*;
import java.awt.*;
import java.time.LocalTime;
import java.util.LinkedList;

public class HabitsGUI extends JFrame {

    private LinkedList<Habit> habitsList;
    private JPanel habitsPanel; // Panel to hold habit entries

    public HabitsGUI(LinkedList<Habit> habits) {
        this.habitsList = habits;
        //window details, size, name, etc...
        setTitle("Habits App");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(600, 750);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

        JButton addButton = new JButton("Add Habit");
        addButton.setAlignmentX(Component.LEFT_ALIGNMENT);
        addButton.addActionListener(e -> addEmptyHabitEntry());

        JButton uncheckAllButton = new JButton("Reset all Habits");
        uncheckAllButton.setAlignmentX(Component.LEFT_ALIGNMENT);
        uncheckAllButton.addActionListener(e -> {
            for (Habit habit : habitsList) {
                habit.setCompleted(false);
            }
            refreshHabitsPanel();
        });

        mainPanel.add(Box.createVerticalGlue());
        mainPanel.add(addButton);
        mainPanel.add(uncheckAllButton);
        mainPanel.add(Box.createVerticalGlue());

        habitsPanel = new JPanel();
        habitsPanel.setLayout(new BoxLayout(habitsPanel, BoxLayout.Y_AXIS));

        JScrollPane scrollPane = new JScrollPane(habitsPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setPreferredSize(new Dimension(300, 600));

        mainPanel.add(scrollPane);
        add(mainPanel);
        setVisible(true);
    }

    private void addEmptyHabitEntry() {
        JPanel habitEntry = new JPanel();
        habitEntry.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        habitEntry.setPreferredSize(new Dimension(300, 80));

        JTextField habitNameField = new JTextField(15);
        JTextArea descriptionArea = new JTextArea(3, 15);
        //allows for the description to wrap if it reaches the end of the box
        descriptionArea.setLineWrap(true);
        descriptionArea.setWrapStyleWord(true);
        //
        JButton saveButton = new JButton("Save Habit");

        JComboBox<String> timeComboBox = new JComboBox<>(getTimeList());

        saveButton.addActionListener(e -> {
            String name = habitNameField.getText();
            String description = descriptionArea.getText();
            if (!name.isEmpty() && !description.isEmpty()) {
                LocalTime selectedTime = null;
                if (timeComboBox.getSelectedIndex() != 0) {
                    selectedTime = LocalTime.parse((String) timeComboBox.getSelectedItem());
                }
                habitsList.add(new Habit(name, description, selectedTime));
                refreshHabitsPanel();
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a habit name and description.");
            }
        });

        habitEntry.add(new JLabel("Habit Name:"));
        habitEntry.add(habitNameField);
        habitEntry.add(new JLabel("Description:"));
        habitEntry.add(new JScrollPane(descriptionArea));
        habitEntry.add(new JLabel("Select Time:"));
        habitEntry.add(timeComboBox);
        habitEntry.add(saveButton);

        habitsPanel.add(habitEntry);

        habitsPanel.revalidate();
        habitsPanel.repaint();
    }

    private void refreshHabitsPanel() {
        habitsPanel.removeAll();
        for (Habit habit : habitsList) {
            addHabitToPanel(habit);
        }
        habitsPanel.revalidate();
        habitsPanel.repaint();
    }

    private void addHabitToPanel(Habit habit) {
        JPanel habitPanel = new JPanel();
        habitPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel nameLabel;
        if (habit.getTime() == null) {
            nameLabel = new JLabel("<html><b><u><i>" +
                    habit.getHabitName() + "</u></b></i>" +
                    ".<br> Description: " + habit.getDescription() +
                    "</html>");
        } else {
            nameLabel = new JLabel("<html><b><u><i>" +
                    habit.getHabitName() + "</u></b></i>" +
                    ".<br> Description: " + habit.getDescription() +
                    "<br> Time: " + habit.getTime() +
                    "</html>");
        }

        JCheckBox checkBox = new JCheckBox();
        checkBox.setSelected(habit.isCompleted());
        checkBox.addActionListener(e -> habit.setCompleted(checkBox.isSelected()));

        habitPanel.add(checkBox);
        habitPanel.add(nameLabel);
        habitsPanel.add(habitPanel);

        habitsPanel.revalidate();
        habitsPanel.repaint();
    }

    private String[] getTimeList() {
        String[] timeList = new String[24 * 60 + 1];
        timeList[0] = "Select Time";
        int index = 1;
        for (int hour = 0; hour < 24; hour++) {
            for (int minute = 0; minute < 60; minute++) {
                timeList[index++] = String.format("%02d:%02d", hour, minute);
            }
        }
        return timeList;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LinkedList<Habit> habits = new LinkedList<>();
            new HabitsGUI(habits);
        });
    }
}
